
adm_pact2_func_asm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dc0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001f54  08001f54  00011f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f6c  08001f6c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08001f6c  08001f6c  00011f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f74  08001f74  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f78  08001f78  00011f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000024  08001fa0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001fa0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000798f  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00007b00  00000000  00000000  000279e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013bb  00000000  00000000  0002f4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000680  00000000  00000000  000308a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00083b06  00000000  00000000  00030f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000005f8  00000000  00000000  000b4a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014e63  00000000  00000000  000b5020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9e83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001960  00000000  00000000  000c9ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001f3c 	.word	0x08001f3c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	08001f3c 	.word	0x08001f3c

080001d4 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001d4:	df00      	svc	0
        bx lr
 80001d6:	4770      	bx	lr

080001d8 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001d8:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001da:	4770      	bx	lr

080001dc <asm_zeros>:
@ Valor de retorno:
@   r0: un vector con tambaño = longitud y todos sus valores en cero
@
.thumb_func
    asm_zeros:
        mov 	r2, 0  @mover el valor cero al registro r2
 80001dc:	f04f 0200 	mov.w	r2, #0

080001e0 <.asm_zeros_for>:
    .asm_zeros_for:
        str 	r2, [r0], 4 @mover r2 a la dirección de memoria del registro r0 *r0 = r2, e incrementarel puntero en 4 = 1 dirección cada 4 bits
 80001e0:	f840 2b04 	str.w	r2, [r0], #4
        subs 	r1, 1  @restar 1 a longitud y cuando llegue a cero actualizar bits N y Z
 80001e4:	3901      	subs	r1, #1
        bne  	.asm_zeros_for
 80001e6:	d1fb      	bne.n	80001e0 <.asm_zeros_for>
        bx 		lr       @ vuelve adonde fue llamada (especificamente, )
 80001e8:	4770      	bx	lr

080001ea <asm_productoEscalar32>:
@ Valor de retorno:
@   r1: un vector ampliado por el escalar
@
.thumb_func
    asm_productoEscalar32:
        push	{r5, r6}  @cargar en el stack los registros r5 y r6 (crear un contexto)
 80001ea:	b460      	push	{r5, r6}

080001ec <.asm_productoEscalar32_for>:
    .asm_productoEscalar32_for:
        ldr		r6, [r0], 4 @cargar en r6 la dirección guardada en r0 (vector entrada) +4 bytes
 80001ec:	f850 6b04 	ldr.w	r6, [r0], #4
        mul 	r5, r6, r3  @multiplicar r6 x r3 y guardar el resultado en r5
 80001f0:	fb06 f503 	mul.w	r5, r6, r3
        str		r5, [r1], 4 @guardar el valor de r5 en r1 (vector de salida) en la posición +4 bytes
 80001f4:	f841 5b04 	str.w	r5, [r1], #4

        subs 	r2, 1  @restar 1 a longitud y cuando llegue a cero actualizar bits N y Z
 80001f8:	3a01      	subs	r2, #1
        bne  	.asm_productoEscalar32_for
 80001fa:	d1f7      	bne.n	80001ec <.asm_productoEscalar32_for>

        pop 	{r5, r6} @devolver los registros cargados en el stack a su valor inicial (cambio de contexto)
 80001fc:	bc60      	pop	{r5, r6}
        bx 		lr       @ vuelve adonde fue llamada (especificamente, )
 80001fe:	4770      	bx	lr

08000200 <asm_productoEscalar16>:
@ Valor de retorno:
@   r1: un vector ampliado por el escalar
@
.thumb_func
    asm_productoEscalar16:
        push	{r5, r6}  @cargar en el stack los registros r5 y r6 (crear un contexto)
 8000200:	b460      	push	{r5, r6}

08000202 <.asm_productoEscalar16_for>:
    .asm_productoEscalar16_for:
        ldrh	r6, [r0], 2 @cargar en r6 la dirección guardada en r0 (vector entrada) +2 bytes
 8000202:	f830 6b02 	ldrh.w	r6, [r0], #2
        mul 	r5, r6, r3  @multiplicar r6 x r3 y guardar el resultado en r5
 8000206:	fb06 f503 	mul.w	r5, r6, r3
        str		r5, [r1], 2 @guardar el valor de r5 en r1 (vector de salida) en la posición +2 bytes
 800020a:	f841 5b02 	str.w	r5, [r1], #2

        subs 	r2, 1  @restar 1 a longitud (r2) y cuando llegue a cero actualizar bits N y Z
 800020e:	3a01      	subs	r2, #1
        bne  	.asm_productoEscalar16_for
 8000210:	d1f7      	bne.n	8000202 <.asm_productoEscalar16_for>

        pop 	{r5, r6} @devolver los registros cargados en el stack a su valor inicial (cambio de contexto)
 8000212:	bc60      	pop	{r5, r6}
        bx 		lr       @ vuelve adonde fue llamada (especificamente, )
 8000214:	4770      	bx	lr

08000216 <asm_productoEscalar12>:
@ Valor de retorno:
@   r1: un vector ampliado por el escalar, de tamño 12 bits y con saturación
@
.thumb_func
    asm_productoEscalar12:
        push	{r4, r6}  @cargar en el stack los registros r5 y r6 (crear un contexto)
 8000216:	b450      	push	{r4, r6}
        mov		r4, 4095
 8000218:	f640 74ff 	movw	r4, #4095	; 0xfff

0800021c <.asm_productoEscalar12_for>:
    .asm_productoEscalar12_for:
        ldrh	r6, [r0], 2 @cargar en r6 la dirección guardada en r0 (vector entrada) +2 bytes
 800021c:	f830 6b02 	ldrh.w	r6, [r0], #2
        mul 	r5, r6, r3  @multiplicar r6 x r3 y guardar el resultado en r5
 8000220:	fb06 f503 	mul.w	r5, r6, r3
        subs	r5, r4		@resta 4095 a lo guardado en r5
 8000224:	1b2d      	subs	r5, r5, r4
        bmi		.guardar_valor @si el resultado anterior es negativo (r5 < 4095) entonces guarda r5 en el vector
 8000226:	d400      	bmi.n	800022a <.guardar_valor>
		mov		r5, r4		@si el resultado anterior es positivo (r5 > 4095) entonces satura 12 bits y guarda en r5
 8000228:	4625      	mov	r5, r4

0800022a <.guardar_valor>:
    .guardar_valor:
        str		r5, [r1], 2 @guardar el valor de r5 en r1 (vector de salida) en la posición +2 bytes
 800022a:	f841 5b02 	str.w	r5, [r1], #2

        subs 	r2, 1  @restar 1 a longitud (r2) y cuando llegue a cero actualizar bits N y Z
 800022e:	3a01      	subs	r2, #1
        bne  	.asm_productoEscalar12_for
 8000230:	d1f4      	bne.n	800021c <.asm_productoEscalar12_for>

        pop 	{r5, r6} @devolver los registros cargados en el stack a su valor inicial (cambio de contexto)
 8000232:	bc60      	pop	{r5, r6}
        bx 		lr       @ vuelve adonde fue llamada (especificamente, )
 8000234:	4770      	bx	lr

08000236 <asm_filtroVentana10>:
@   r1: un vector ampliado por el escalar, de tamño 12 bits y con saturación
@

.thumb_func
    asm_filtroVentana10:
        push 	{r4-r11} 		@ cargar en el stack los registros r5 y r6 (crear un contexto)
 8000236:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
        mov 	r5, r0			@ se carga vectorIn en r5
 800023a:	4605      	mov	r5, r0
        mov 	r7, 10			@ r7 define el tamaño de la ventana
 800023c:	f04f 070a 	mov.w	r7, #10
        mov 	r6, 0			@ r6 guarda las iteraciones del for principal (i)
 8000240:	f04f 0600 	mov.w	r6, #0

08000244 <.asm_filtroVentana10_for>:

    .asm_filtroVentana10_for:
        mov 	r3, 0			@ se limpia r3 en cada iteracion para vaciar la ventana
 8000244:	f04f 0300 	mov.w	r3, #0
        mov 	r9, r6          @ r9 guarda las iteraciones del for de la ventana actualiza su valor en cada iteracion del for principal
 8000248:	46b1      	mov	r9, r6
        mov 	r5, r0			@ se carga el vectorIn en cada iteración
 800024a:	4605      	mov	r5, r0

0800024c <.asm_filtroVentana10_ventanaFor>:

    .asm_filtroVentana10_ventanaFor:
       udiv 	r10, r9, r2		@ divide el numero de iteracion entre tamaño del vector y guarda en r10
 800024c:	fbb9 faf2 	udiv	sl, r9, r2
       mul 		r11, r10, r2	@ multiplica lo anterior por el tamaño del vector
 8000250:	fb0a fb02 	mul.w	fp, sl, r2
       sub 		r10, r9, r11	@ se hace el roll-over cuando se supera el tamaño del vector
 8000254:	eba9 0a0b 	sub.w	sl, r9, fp

       add 		r5, r0, r10, LSL 1     @ se incrementa en 1 la posición del vector
 8000258:	eb00 054a 	add.w	r5, r0, sl, lsl #1
       add 		r9, 1                   @ se incrementa el contador del for de ventana
 800025c:	f109 0901 	add.w	r9, r9, #1

       ldrh 	r4, [r5]       	@ se carga el valor del VectorIn
 8000260:	882c      	ldrh	r4, [r5, #0]
       add 		r3, r4          @ se suma el valor anterior con el actual
 8000262:	4423      	add	r3, r4

       subs 	r7, 1			@ se decrementa el valor de la ventana en cada iteracion
 8000264:	3f01      	subs	r7, #1
       bne 		.asm_filtroVentana10_ventanaFor
 8000266:	d1f1      	bne.n	800024c <.asm_filtroVentana10_ventanaFor>

       mov 		r7, 10			@ se carga nuevamente la ventana con 10 para el siguiente grupo de ciclos
 8000268:	f04f 070a 	mov.w	r7, #10

       udiv 	r8, r3, r7      @ se saca el promedio de los valores acumulados
 800026c:	fbb3 f8f7 	udiv	r8, r3, r7
       strh 	r8, [r1], 2     @ se guarda en elpromedio en el vector de salida
 8000270:	f821 8b02 	strh.w	r8, [r1], #2
       add 		r6,1            @ se incrementa el contador del for principal
 8000274:	f106 0601 	add.w	r6, r6, #1
       cmp 		r2, r6          @ se valida si llegó a al último elemento del vectorIn
 8000278:	42b2      	cmp	r2, r6
       bne 		.asm_filtroVentana10_for
 800027a:	d1e3      	bne.n	8000244 <.asm_filtroVentana10_for>

       pop 		{r4-r11}		@devolver los registros cargados en el stack a su valor inicial (cambio de contexto)
 800027c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
       bx 		lr				@ vuelve adonde fue llamada
 8000280:	4770      	bx	lr

08000282 <asm_pack32to16>:
@ Valor de retorno:
@   r1: vector con elementos de 16 bits, empaquetando 32 bits
@
.thumb_func
    asm_pack32to16:
        push 	{r4}
 8000282:	b410      	push	{r4}
        mov 	r3, 0			@ se inicializa r3 en 0 para limpiar espurias
 8000284:	f04f 0300 	mov.w	r3, #0

08000288 <.asm_pack32to16_for>:
    .asm_pack32to16_for:
        ldr		r3, [r0], 4     @ se carga en r3 la posicion de r0 (vector entrada)
 8000288:	f850 3b04 	ldr.w	r3, [r0], #4
        mov		r4, r3, lsr 16 @ se guarda en r4 los 16 MSB
 800028c:	ea4f 4413 	mov.w	r4, r3, lsr #16
        strh 	r4, [r1], 2    	@ se guardan los 16 LSB de r4 en r1 (vector salida)
 8000290:	f821 4b02 	strh.w	r4, [r1], #2
        subs 	r2, 1         	@ se resta 1 a r2 (longitud vector) y se actualizan los flags de estatus
 8000294:	3a01      	subs	r2, #1
        bne 	.asm_pack32to16_for @ salta si z != 0
 8000296:	d1f7      	bne.n	8000288 <.asm_pack32to16_for>
        pop 	{r4}
 8000298:	bc10      	pop	{r4}
        bx 		lr				@ vuelve adonde fue llamada
 800029a:	4770      	bx	lr

0800029c <asm_max>:
@ Valor de retorno:
@   r0: la posición del elemento de mayor valor en el vector de entrada

.thumb_func
    asm_max:
        push 	{r4, r5}
 800029c:	b430      	push	{r4, r5}
        mov		r2, 0			@ se inicia el pivote en 0
 800029e:	f04f 0200 	mov.w	r2, #0
        mov 	r3, 0           @ Posición inicial 0
 80002a2:	f04f 0300 	mov.w	r3, #0
        ldr 	r4, [r0]        @ se carga la posición 0 del vector de entrada en r4 como max temporal
 80002a6:	6804      	ldr	r4, [r0, #0]
        mov 	r5, 0           @ se inicia la posición en 0
 80002a8:	f04f 0500 	mov.w	r5, #0

080002ac <.asm_max_for>:
    .asm_max_for:
        ldr 	r2, [r0], 4     @ se cargan las posiciones del vector entrada en r2 en cada iteracion
 80002ac:	f850 2b04 	ldr.w	r2, [r0], #4
        cmp 	r2, r4          @ compara los valores y se actualizan los flags de STATUS
 80002b0:	42a2      	cmp	r2, r4
        bgt 	.greater_than	@ salta si r2 es mayor que r4
 80002b2:	dc00      	bgt.n	80002b6 <.greater_than>
        b		.continue		@ salta a continue si r2 no es mayor
 80002b4:	e001      	b.n	80002ba <.continue>

080002b6 <.greater_than>:
    .greater_than:
        mov 	r4, r2          @ se actualiza el maximo temporal con r2
 80002b6:	4614      	mov	r4, r2
        mov 	r3, r5          @ se carga el numero de la iteracion como el inidice del valor max actual
 80002b8:	462b      	mov	r3, r5

080002ba <.continue>:
    .continue:
        add 	r5, 1           @ se incrementa la cuenta del for
 80002ba:	f105 0501 	add.w	r5, r5, #1
        subs 	r1, 1          	@ se descuenta el numero de iteraciones
 80002be:	3901      	subs	r1, #1
        bne 	.asm_max_for 	@ salta si no se han acabado las iteraciones
 80002c0:	d1f4      	bne.n	80002ac <.asm_max_for>
        mov 	r0, r3          @ cuando se recorre todo el vector carga en r0 el valor de la pos. del max
 80002c2:	4618      	mov	r0, r3
        pop 	{r4, r5}
 80002c4:	bc30      	pop	{r4, r5}
        bx 		lr				@ vuelve adonde fue llamada
 80002c6:	4770      	bx	lr

080002c8 <asm_invertir>:



.thumb_func
    asm_invertir:
        push 	{r4-r5}
 80002c8:	b430      	push	{r4, r5}
        mov 	r2, 2			@ almacena temporalemente 2 para hacer la división
 80002ca:	f04f 0202 	mov.w	r2, #2
		udiv 	r3, r1, r2		@ se calcula el número dividendo por 2, ya que solo se requiere la mitad de las iteraciones
 80002ce:	fbb1 f3f2 	udiv	r3, r1, r2
		ldrh 	r2, [r0, -2]	@ se carga la última posición del vector entrada en r2
 80002d2:	f830 2c02 	ldrh.w	r2, [r0, #-2]

080002d6 <.asm_invertir_for>:
    .asm_invertir_for:
        ldrh 	r4, [r0], 2     @ se carga la posición inicial del vector en r4
 80002d6:	f830 4b02 	ldrh.w	r4, [r0], #2
        ldrh 	r5, [r2], -2    @ se carga la posicion final del vector en r5
 80002da:	f832 5902 	ldrh.w	r5, [r2], #-2
        strh 	r4, [r0], 2     @ se invierten las posicones finales e iniciales
 80002de:	f820 4b02 	strh.w	r4, [r0], #2
        strh 	r5, [r2], -2    @ se invierten las posicones finales e iniciales
 80002e2:	f822 5902 	strh.w	r5, [r2], #-2
        subs 	r3, 1
 80002e6:	3b01      	subs	r3, #1
        bne 	.asm_invertir_for
 80002e8:	d1f5      	bne.n	80002d6 <.asm_invertir_for>
        pop 	{r4-r5}
 80002ea:	bc30      	pop	{r4, r5}
        bx 		lr
 80002ec:	4770      	bx	lr
	...

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <PrivilegiosSVC>:

}


static void PrivilegiosSVC (void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80005fa:	f3ef 8314 	mrs	r3, CONTROL
 80005fe:	607b      	str	r3, [r7, #4]
  return(result);
 8000600:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 8000602:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	f383 8814 	msr	CONTROL, r3
}
 8000616:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000618:	f3ef 8314 	mrs	r3, CONTROL
 800061c:	60fb      	str	r3, [r7, #12]
  return(result);
 800061e:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000620:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	f023 0301 	bic.w	r3, r3, #1
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	f383 8814 	msr	CONTROL, r3
}
 8000634:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000636:	f3ef 8314 	mrs	r3, CONTROL
 800063a:	617b      	str	r3, [r7, #20]
  return(result);
 800063c:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 800063e:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000640:	f7ff fdc8 	bl	80001d4 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000644:	f3ef 8314 	mrs	r3, CONTROL
 8000648:	61bb      	str	r3, [r7, #24]
  return(result);
 800064a:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 800064c:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <zeros>:


void zeros(uint32_t * vector, uint32_t longitud){
 8000656:	b480      	push	{r7}
 8000658:	b085      	sub	sp, #20
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
 800065e:	6039      	str	r1, [r7, #0]

		  for(uint32_t i = 0; i <= longitud; i++){
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e008      	b.n	8000678 <zeros+0x22>
			  vector[i] = 0;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
		  for(uint32_t i = 0; i <= longitud; i++){
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d9f2      	bls.n	8000666 <zeros+0x10>

		   }
}
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <productoEscalar32>:

void productoEscalar32(uint32_t * vectorIn, uint32_t * vectorOut, uint32_t longitud, uint32_t escalar){
 800068e:	b480      	push	{r7}
 8000690:	b087      	sub	sp, #28
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	603b      	str	r3, [r7, #0]

		  for(uint32_t i = 0; i <= longitud; i++){
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	e00f      	b.n	80006c2 <productoEscalar32+0x34>
			  vectorOut[i] = vectorIn[i]*escalar;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	440b      	add	r3, r1
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	fb01 f202 	mul.w	r2, r1, r2
 80006ba:	601a      	str	r2, [r3, #0]
		  for(uint32_t i = 0; i <= longitud; i++){
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	3301      	adds	r3, #1
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d9eb      	bls.n	80006a2 <productoEscalar32+0x14>
		   }
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	371c      	adds	r7, #28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <productoEscalar16>:

void productoEscalar16(uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud, uint16_t escalar){
 80006d8:	b480      	push	{r7}
 80006da:	b087      	sub	sp, #28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	807b      	strh	r3, [r7, #2]

		  for(uint32_t i = 0; i <= longitud; i++){
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	e010      	b.n	800070e <productoEscalar16+0x36>
			  vectorOut[i] = vectorIn[i]*escalar;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	881a      	ldrh	r2, [r3, #0]
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	68b9      	ldr	r1, [r7, #8]
 80006fc:	440b      	add	r3, r1
 80006fe:	8879      	ldrh	r1, [r7, #2]
 8000700:	fb11 f202 	smulbb	r2, r1, r2
 8000704:	b292      	uxth	r2, r2
 8000706:	801a      	strh	r2, [r3, #0]
		  for(uint32_t i = 0; i <= longitud; i++){
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3301      	adds	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	429a      	cmp	r2, r3
 8000714:	d9ea      	bls.n	80006ec <productoEscalar16+0x14>

		   }
}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	371c      	adds	r7, #28
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <productoEscalar12>:


void productoEscalar12 (uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud, uint16_t escalar){
 8000724:	b480      	push	{r7}
 8000726:	b087      	sub	sp, #28
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	807b      	strh	r3, [r7, #2]

	for(uint32_t i = 0 ; i < longitud ; i++){
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e01e      	b.n	8000776 <productoEscalar12+0x52>
		uint16_t x = vectorIn[i]*escalar;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	4413      	add	r3, r2
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	887a      	ldrh	r2, [r7, #2]
 8000744:	fb12 f303 	smulbb	r3, r2, r3
 8000748:	827b      	strh	r3, [r7, #18]
		     if(x >= 4095){
 800074a:	8a7b      	ldrh	r3, [r7, #18]
 800074c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000750:	4293      	cmp	r3, r2
 8000752:	d907      	bls.n	8000764 <productoEscalar12+0x40>
	        		vectorOut[i] = 4095;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000760:	801a      	strh	r2, [r3, #0]
 8000762:	e005      	b.n	8000770 <productoEscalar12+0x4c>
            }else{
                    vectorOut[i] = x;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	4413      	add	r3, r2
 800076c:	8a7a      	ldrh	r2, [r7, #18]
 800076e:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0 ; i < longitud ; i++){
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	3301      	adds	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	d3dc      	bcc.n	8000738 <productoEscalar12+0x14>
                }

	}
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	371c      	adds	r7, #28
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 f9b1 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f82f 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 f8b7 	bl	800090c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800079e:	f000 f88b 	bl	80008b8 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */


  PrivilegiosSVC ();
 80007a2:	f7ff ff27 	bl	80005f4 <PrivilegiosSVC>

    const uint32_t Resultado = asm_sum (5, 3);
 80007a6:	2103      	movs	r1, #3
 80007a8:	2005      	movs	r0, #5
 80007aa:	f7ff fd15 	bl	80001d8 <asm_sum>
 80007ae:	6078      	str	r0, [r7, #4]

    zeros (zero_vector, 3);
 80007b0:	2103      	movs	r1, #3
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <main+0x54>)
 80007b4:	f7ff ff4f 	bl	8000656 <zeros>

    productoEscalar16(vectorIn16, vectorOut16, 4, 3);
 80007b8:	2303      	movs	r3, #3
 80007ba:	2204      	movs	r2, #4
 80007bc:	4909      	ldr	r1, [pc, #36]	; (80007e4 <main+0x58>)
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <main+0x5c>)
 80007c0:	f7ff ff8a 	bl	80006d8 <productoEscalar16>

    productoEscalar32(vectorIn32, vectorOut32, 4, 3);
 80007c4:	2303      	movs	r3, #3
 80007c6:	2204      	movs	r2, #4
 80007c8:	4908      	ldr	r1, [pc, #32]	; (80007ec <main+0x60>)
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <main+0x64>)
 80007cc:	f7ff ff5f 	bl	800068e <productoEscalar32>

    productoEscalar12 (vectorIn16, vectorOut12, 4, 3000);
 80007d0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80007d4:	2204      	movs	r2, #4
 80007d6:	4907      	ldr	r1, [pc, #28]	; (80007f4 <main+0x68>)
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <main+0x5c>)
 80007da:	f7ff ffa3 	bl	8000724 <productoEscalar12>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007de:	e7fe      	b.n	80007de <main+0x52>
 80007e0:	20000040 	.word	0x20000040
 80007e4:	20000054 	.word	0x20000054
 80007e8:	20000010 	.word	0x20000010
 80007ec:	20000044 	.word	0x20000044
 80007f0:	20000000 	.word	0x20000000
 80007f4:	2000005c 	.word	0x2000005c

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	; 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	2230      	movs	r2, #48	; 0x30
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fb90 	bl	8001f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <SystemClock_Config+0xb8>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <SystemClock_Config+0xb8>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <SystemClock_Config+0xb8>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <SystemClock_Config+0xbc>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000844:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <SystemClock_Config+0xbc>)
 8000846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <SystemClock_Config+0xbc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2310      	movs	r3, #16
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fc1f 	bl	80010b0 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000878:	f000 f862 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fe82 	bl	80015a0 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008a2:	f000 f84d 	bl	8000940 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3750      	adds	r7, #80	; 0x50
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40007000 	.word	0x40007000

080008b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART1_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008f0:	f001 f836 	bl	8001960 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f821 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000064 	.word	0x20000064
 8000908:	40011000 	.word	0x40011000

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_GPIO_Init+0x30>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <MX_GPIO_Init+0x30>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_GPIO_Init+0x30>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12c      	bne.n	8000a18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0x8c>)
 8000a14:	f000 f9c8 	bl	8000da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40011000 	.word	0x40011000
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f890 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aaa:	490e      	ldr	r1, [pc, #56]	; (8000ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac0:	4c0b      	ldr	r4, [pc, #44]	; (8000af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ace:	f7ff ffd7 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f001 fa07 	bl	8001ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fe59 	bl	800078c <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000adc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000ae8:	08001f7c 	.word	0x08001f7c
  ldr r2, =_sbss
 8000aec:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000af0:	200000ac 	.word	0x200000ac

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <HAL_Init+0x40>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <HAL_Init+0x40>)
 8000b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_Init+0x40>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f90d 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f000 f808 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff ff0e 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023c00 	.word	0x40023c00

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x54>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x58>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f917 	bl	8000d8e <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 f8ed 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000018 	.word	0x20000018
 8000b94:	20000020 	.word	0x20000020
 8000b98:	2000001c 	.word	0x2000001c

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000020 	.word	0x20000020
 8000bc0:	200000a8 	.word	0x200000a8

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200000a8 	.word	0x200000a8

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff47 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff5c 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff8e 	bl	8000c94 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5d 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffb0 	bl	8000cfc <SysTick_Config>
 8000d9c:	4603      	mov	r3, r0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	e159      	b.n	8001078 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f040 8148 	bne.w	8001072 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d005      	beq.n	8000dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d130      	bne.n	8000e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 0201 	and.w	r2, r3, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d017      	beq.n	8000e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	69b9      	ldr	r1, [r7, #24]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80a2 	beq.w	8001072 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b57      	ldr	r3, [pc, #348]	; (8001090 <HAL_GPIO_Init+0x2e8>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a56      	ldr	r2, [pc, #344]	; (8001090 <HAL_GPIO_Init+0x2e8>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b54      	ldr	r3, [pc, #336]	; (8001090 <HAL_GPIO_Init+0x2e8>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4a:	4a52      	ldr	r2, [pc, #328]	; (8001094 <HAL_GPIO_Init+0x2ec>)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a49      	ldr	r2, [pc, #292]	; (8001098 <HAL_GPIO_Init+0x2f0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_GPIO_Init+0x202>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a48      	ldr	r2, [pc, #288]	; (800109c <HAL_GPIO_Init+0x2f4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0x1fe>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a47      	ldr	r2, [pc, #284]	; (80010a0 <HAL_GPIO_Init+0x2f8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00d      	beq.n	8000fa2 <HAL_GPIO_Init+0x1fa>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a46      	ldr	r2, [pc, #280]	; (80010a4 <HAL_GPIO_Init+0x2fc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x1f6>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a45      	ldr	r2, [pc, #276]	; (80010a8 <HAL_GPIO_Init+0x300>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_GPIO_Init+0x1f2>
 8000f96:	2304      	movs	r3, #4
 8000f98:	e008      	b.n	8000fac <HAL_GPIO_Init+0x204>
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x204>
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e004      	b.n	8000fac <HAL_GPIO_Init+0x204>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e002      	b.n	8000fac <HAL_GPIO_Init+0x204>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <HAL_GPIO_Init+0x204>
 8000faa:	2300      	movs	r3, #0
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	f002 0203 	and.w	r2, r2, #3
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	4093      	lsls	r3, r2
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fbc:	4935      	ldr	r1, [pc, #212]	; (8001094 <HAL_GPIO_Init+0x2ec>)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <HAL_GPIO_Init+0x304>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fee:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <HAL_GPIO_Init+0x304>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <HAL_GPIO_Init+0x304>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001018:	4a24      	ldr	r2, [pc, #144]	; (80010ac <HAL_GPIO_Init+0x304>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <HAL_GPIO_Init+0x304>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001042:	4a1a      	ldr	r2, [pc, #104]	; (80010ac <HAL_GPIO_Init+0x304>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_GPIO_Init+0x304>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <HAL_GPIO_Init+0x304>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	2b0f      	cmp	r3, #15
 800107c:	f67f aea2 	bls.w	8000dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40013800 	.word	0x40013800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40013c00 	.word	0x40013c00

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e267      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d075      	beq.n	80011ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ce:	4b88      	ldr	r3, [pc, #544]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d00c      	beq.n	80010f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010da:	4b85      	ldr	r3, [pc, #532]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d112      	bne.n	800110c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e6:	4b82      	ldr	r3, [pc, #520]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010f2:	d10b      	bne.n	800110c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	4b7e      	ldr	r3, [pc, #504]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d05b      	beq.n	80011b8 <HAL_RCC_OscConfig+0x108>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d157      	bne.n	80011b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e242      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001114:	d106      	bne.n	8001124 <HAL_RCC_OscConfig+0x74>
 8001116:	4b76      	ldr	r3, [pc, #472]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a75      	ldr	r2, [pc, #468]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e01d      	b.n	8001160 <HAL_RCC_OscConfig+0xb0>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x98>
 800112e:	4b70      	ldr	r3, [pc, #448]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6f      	ldr	r2, [pc, #444]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b6d      	ldr	r3, [pc, #436]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a6c      	ldr	r2, [pc, #432]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0xb0>
 8001148:	4b69      	ldr	r3, [pc, #420]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a68      	ldr	r2, [pc, #416]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 800114e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a65      	ldr	r2, [pc, #404]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d013      	beq.n	8001190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fd2c 	bl	8000bc4 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fd28 	bl	8000bc4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e207      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	4b5b      	ldr	r3, [pc, #364]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0xc0>
 800118e:	e014      	b.n	80011ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fd18 	bl	8000bc4 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fd14 	bl	8000bc4 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	; 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e1f3      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0xe8>
 80011b6:	e000      	b.n	80011ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d063      	beq.n	800128e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d11c      	bne.n	8001218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011de:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d116      	bne.n	8001218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_RCC_OscConfig+0x152>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d001      	beq.n	8001202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e1c7      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4937      	ldr	r1, [pc, #220]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001216:	e03a      	b.n	800128e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d020      	beq.n	8001262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001220:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <HAL_RCC_OscConfig+0x244>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001226:	f7ff fccd 	bl	8000bc4 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fcc9 	bl	8000bc4 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e1a8      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4925      	ldr	r1, [pc, #148]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
 8001260:	e015      	b.n	800128e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <HAL_RCC_OscConfig+0x244>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fcac 	bl	8000bc4 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001270:	f7ff fca8 	bl	8000bc4 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e187      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d036      	beq.n	8001308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d016      	beq.n	80012d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_RCC_OscConfig+0x248>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff fc8c 	bl	8000bc4 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc88 	bl	8000bc4 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e167      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x200>
 80012ce:	e01b      	b.n	8001308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_RCC_OscConfig+0x248>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fc75 	bl	8000bc4 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	e00e      	b.n	80012fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012de:	f7ff fc71 	bl	8000bc4 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d907      	bls.n	80012fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e150      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
 80012f0:	40023800 	.word	0x40023800
 80012f4:	42470000 	.word	0x42470000
 80012f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b88      	ldr	r3, [pc, #544]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80012fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1ea      	bne.n	80012de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8097 	beq.w	8001444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b81      	ldr	r3, [pc, #516]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b7d      	ldr	r3, [pc, #500]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a7c      	ldr	r2, [pc, #496]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b7a      	ldr	r3, [pc, #488]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b77      	ldr	r3, [pc, #476]	; (8001524 <HAL_RCC_OscConfig+0x474>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d118      	bne.n	8001384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001352:	4b74      	ldr	r3, [pc, #464]	; (8001524 <HAL_RCC_OscConfig+0x474>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a73      	ldr	r2, [pc, #460]	; (8001524 <HAL_RCC_OscConfig+0x474>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135e:	f7ff fc31 	bl	8000bc4 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001366:	f7ff fc2d 	bl	8000bc4 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e10c      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	4b6a      	ldr	r3, [pc, #424]	; (8001524 <HAL_RCC_OscConfig+0x474>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x2ea>
 800138c:	4b64      	ldr	r3, [pc, #400]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001390:	4a63      	ldr	r2, [pc, #396]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6713      	str	r3, [r2, #112]	; 0x70
 8001398:	e01c      	b.n	80013d4 <HAL_RCC_OscConfig+0x324>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x30c>
 80013a2:	4b5f      	ldr	r3, [pc, #380]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	4a5e      	ldr	r2, [pc, #376]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6713      	str	r3, [r2, #112]	; 0x70
 80013ae:	4b5c      	ldr	r3, [pc, #368]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b2:	4a5b      	ldr	r2, [pc, #364]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ba:	e00b      	b.n	80013d4 <HAL_RCC_OscConfig+0x324>
 80013bc:	4b58      	ldr	r3, [pc, #352]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c0:	4a57      	ldr	r2, [pc, #348]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	6713      	str	r3, [r2, #112]	; 0x70
 80013c8:	4b55      	ldr	r3, [pc, #340]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013cc:	4a54      	ldr	r2, [pc, #336]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80013ce:	f023 0304 	bic.w	r3, r3, #4
 80013d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d015      	beq.n	8001408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fbf2 	bl	8000bc4 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7ff fbee 	bl	8000bc4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e0cb      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fa:	4b49      	ldr	r3, [pc, #292]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0ee      	beq.n	80013e4 <HAL_RCC_OscConfig+0x334>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001408:	f7ff fbdc 	bl	8000bc4 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140e:	e00a      	b.n	8001426 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001410:	f7ff fbd8 	bl	8000bc4 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f241 3288 	movw	r2, #5000	; 0x1388
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e0b5      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001426:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1ee      	bne.n	8001410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001438:	4b39      	ldr	r3, [pc, #228]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a38      	ldr	r2, [pc, #224]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 800143e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80a1 	beq.w	8001590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800144e:	4b34      	ldr	r3, [pc, #208]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d05c      	beq.n	8001514 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d141      	bne.n	80014e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001462:	4b31      	ldr	r3, [pc, #196]	; (8001528 <HAL_RCC_OscConfig+0x478>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fbac 	bl	8000bc4 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff fba8 	bl	8000bc4 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e087      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	4b27      	ldr	r3, [pc, #156]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	3b01      	subs	r3, #1
 80014a8:	041b      	lsls	r3, r3, #16
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	491b      	ldr	r1, [pc, #108]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_RCC_OscConfig+0x478>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fb81 	bl	8000bc4 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c6:	f7ff fb7d 	bl	8000bc4 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e05c      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x416>
 80014e4:	e054      	b.n	8001590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_RCC_OscConfig+0x478>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fb6a 	bl	8000bc4 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff fb66 	bl	8000bc4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e045      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_RCC_OscConfig+0x470>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x444>
 8001512:	e03d      	b.n	8001590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d107      	bne.n	800152c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e038      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
 8001520:	40023800 	.word	0x40023800
 8001524:	40007000 	.word	0x40007000
 8001528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_RCC_OscConfig+0x4ec>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d028      	beq.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d121      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	429a      	cmp	r2, r3
 8001554:	d11a      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800155c:	4013      	ands	r3, r2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001564:	4293      	cmp	r3, r2
 8001566:	d111      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	3b01      	subs	r3, #1
 8001576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001578:	429a      	cmp	r2, r3
 800157a:	d107      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0cc      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d90c      	bls.n	80015dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b65      	ldr	r3, [pc, #404]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b63      	ldr	r3, [pc, #396]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0b8      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a58      	ldr	r2, [pc, #352]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a52      	ldr	r2, [pc, #328]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	494d      	ldr	r1, [pc, #308]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d044      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d119      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e07f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d003      	beq.n	800165e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165a:	2b03      	cmp	r3, #3
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e06f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e067      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 0203 	bic.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4934      	ldr	r1, [pc, #208]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001690:	f7ff fa98 	bl	8000bc4 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	e00a      	b.n	80016ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001698:	f7ff fa94 	bl	8000bc4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e04f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 020c 	and.w	r2, r3, #12
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	429a      	cmp	r2, r3
 80016be:	d1eb      	bne.n	8001698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d20c      	bcs.n	80016e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e032      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4916      	ldr	r1, [pc, #88]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	490e      	ldr	r1, [pc, #56]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001726:	f000 f821 	bl	800176c <HAL_RCC_GetSysClockFreq>
 800172a:	4602      	mov	r2, r0
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	490a      	ldr	r1, [pc, #40]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	5ccb      	ldrb	r3, [r1, r3]
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f9f8 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00
 800175c:	40023800 	.word	0x40023800
 8001760:	08001f54 	.word	0x08001f54
 8001764:	20000018 	.word	0x20000018
 8001768:	2000001c 	.word	0x2000001c

0800176c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001770:	b090      	sub	sp, #64	; 0x40
 8001772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
 8001778:	2300      	movs	r3, #0
 800177a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	d00d      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0x40>
 8001790:	2b08      	cmp	r3, #8
 8001792:	f200 80a1 	bhi.w	80018d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x34>
 800179a:	2b04      	cmp	r3, #4
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800179e:	e09b      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80017a4:	e09b      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017a6:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017aa:	e098      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ac:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b6:	4b4d      	ldr	r3, [pc, #308]	; (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d028      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c2:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	2200      	movs	r2, #0
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	627a      	str	r2, [r7, #36]	; 0x24
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017d4:	2100      	movs	r1, #0
 80017d6:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017d8:	fb03 f201 	mul.w	r2, r3, r1
 80017dc:	2300      	movs	r3, #0
 80017de:	fb00 f303 	mul.w	r3, r0, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	4a43      	ldr	r2, [pc, #268]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017e6:	fba0 1202 	umull	r1, r2, r0, r2
 80017ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017ec:	460a      	mov	r2, r1
 80017ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80017f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f2:	4413      	add	r3, r2
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f8:	2200      	movs	r2, #0
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	61fa      	str	r2, [r7, #28]
 80017fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001802:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001806:	f7fe fd73 	bl	80002f0 <__aeabi_uldivmod>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4613      	mov	r3, r2
 8001810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001812:	e053      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001814:	4b35      	ldr	r3, [pc, #212]	; (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	2200      	movs	r2, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	617a      	str	r2, [r7, #20]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001826:	f04f 0b00 	mov.w	fp, #0
 800182a:	4652      	mov	r2, sl
 800182c:	465b      	mov	r3, fp
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0159      	lsls	r1, r3, #5
 8001838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183c:	0150      	lsls	r0, r2, #5
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	ebb2 080a 	subs.w	r8, r2, sl
 8001846:	eb63 090b 	sbc.w	r9, r3, fp
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001856:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800185a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800185e:	ebb2 0408 	subs.w	r4, r2, r8
 8001862:	eb63 0509 	sbc.w	r5, r3, r9
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	00eb      	lsls	r3, r5, #3
 8001870:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001874:	00e2      	lsls	r2, r4, #3
 8001876:	4614      	mov	r4, r2
 8001878:	461d      	mov	r5, r3
 800187a:	eb14 030a 	adds.w	r3, r4, sl
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	eb45 030b 	adc.w	r3, r5, fp
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001892:	4629      	mov	r1, r5
 8001894:	028b      	lsls	r3, r1, #10
 8001896:	4621      	mov	r1, r4
 8001898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800189c:	4621      	mov	r1, r4
 800189e:	028a      	lsls	r2, r1, #10
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a6:	2200      	movs	r2, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	60fa      	str	r2, [r7, #12]
 80018ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018b0:	f7fe fd1e 	bl	80002f0 <__aeabi_uldivmod>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4613      	mov	r3, r2
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	0c1b      	lsrs	r3, r3, #16
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	3301      	adds	r3, #1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80018cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018d6:	e002      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3740      	adds	r7, #64	; 0x40
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	00f42400 	.word	0x00f42400
 80018f4:	017d7840 	.word	0x017d7840

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_RCC_GetHCLKFreq+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000018 	.word	0x20000018

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff0 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	08001f64 	.word	0x08001f64

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffdc 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0b5b      	lsrs	r3, r3, #13
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	; (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	08001f64 	.word	0x08001f64

08001960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e03f      	b.n	80019f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff f808 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2224      	movs	r2, #36	; 0x24
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f829 	bl	80019fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a00:	b0c0      	sub	sp, #256	; 0x100
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a18:	68d9      	ldr	r1, [r3, #12]
 8001a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	ea40 0301 	orr.w	r3, r0, r1
 8001a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001a54:	f021 010c 	bic.w	r1, r1, #12
 8001a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a62:	430b      	orrs	r3, r1
 8001a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a76:	6999      	ldr	r1, [r3, #24]
 8001a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	ea40 0301 	orr.w	r3, r0, r1
 8001a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b8f      	ldr	r3, [pc, #572]	; (8001cc8 <UART_SetConfig+0x2cc>)
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d005      	beq.n	8001a9c <UART_SetConfig+0xa0>
 8001a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b8d      	ldr	r3, [pc, #564]	; (8001ccc <UART_SetConfig+0x2d0>)
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d104      	bne.n	8001aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a9c:	f7ff ff4c 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 8001aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001aa4:	e003      	b.n	8001aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001aa6:	f7ff ff33 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8001aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab8:	f040 810c 	bne.w	8001cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ace:	4622      	mov	r2, r4
 8001ad0:	462b      	mov	r3, r5
 8001ad2:	1891      	adds	r1, r2, r2
 8001ad4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ad6:	415b      	adcs	r3, r3
 8001ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ade:	4621      	mov	r1, r4
 8001ae0:	eb12 0801 	adds.w	r8, r2, r1
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	eb43 0901 	adc.w	r9, r3, r1
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001afe:	4690      	mov	r8, r2
 8001b00:	4699      	mov	r9, r3
 8001b02:	4623      	mov	r3, r4
 8001b04:	eb18 0303 	adds.w	r3, r8, r3
 8001b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b0c:	462b      	mov	r3, r5
 8001b0e:	eb49 0303 	adc.w	r3, r9, r3
 8001b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	18db      	adds	r3, r3, r3
 8001b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8001b30:	4613      	mov	r3, r2
 8001b32:	eb42 0303 	adc.w	r3, r2, r3
 8001b36:	657b      	str	r3, [r7, #84]	; 0x54
 8001b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b40:	f7fe fbd6 	bl	80002f0 <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <UART_SetConfig+0x2d4>)
 8001b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	011c      	lsls	r4, r3, #4
 8001b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b56:	2200      	movs	r2, #0
 8001b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001b64:	4642      	mov	r2, r8
 8001b66:	464b      	mov	r3, r9
 8001b68:	1891      	adds	r1, r2, r2
 8001b6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001b6c:	415b      	adcs	r3, r3
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b74:	4641      	mov	r1, r8
 8001b76:	eb12 0a01 	adds.w	sl, r2, r1
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b94:	4692      	mov	sl, r2
 8001b96:	469b      	mov	fp, r3
 8001b98:	4643      	mov	r3, r8
 8001b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8001b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	18db      	adds	r3, r3, r3
 8001bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	eb42 0303 	adc.w	r3, r2, r3
 8001bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8001bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001bd6:	f7fe fb8b 	bl	80002f0 <__aeabi_uldivmod>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <UART_SetConfig+0x2d4>)
 8001be2:	fba3 2301 	umull	r2, r3, r3, r1
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2264      	movs	r2, #100	; 0x64
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	1acb      	subs	r3, r1, r3
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <UART_SetConfig+0x2d4>)
 8001bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c04:	441c      	add	r4, r3
 8001c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001c18:	4642      	mov	r2, r8
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	1891      	adds	r1, r2, r2
 8001c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c20:	415b      	adcs	r3, r3
 8001c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c28:	4641      	mov	r1, r8
 8001c2a:	1851      	adds	r1, r2, r1
 8001c2c:	6339      	str	r1, [r7, #48]	; 0x30
 8001c2e:	4649      	mov	r1, r9
 8001c30:	414b      	adcs	r3, r1
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001c40:	4659      	mov	r1, fp
 8001c42:	00cb      	lsls	r3, r1, #3
 8001c44:	4651      	mov	r1, sl
 8001c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c4a:	4651      	mov	r1, sl
 8001c4c:	00ca      	lsls	r2, r1, #3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	4603      	mov	r3, r0
 8001c54:	4642      	mov	r2, r8
 8001c56:	189b      	adds	r3, r3, r2
 8001c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c5c:	464b      	mov	r3, r9
 8001c5e:	460a      	mov	r2, r1
 8001c60:	eb42 0303 	adc.w	r3, r2, r3
 8001c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	18db      	adds	r3, r3, r3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c82:	4613      	mov	r3, r2
 8001c84:	eb42 0303 	adc.w	r3, r2, r3
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001c92:	f7fe fb2d 	bl	80002f0 <__aeabi_uldivmod>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <UART_SetConfig+0x2d4>)
 8001c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001ca0:	095b      	lsrs	r3, r3, #5
 8001ca2:	2164      	movs	r1, #100	; 0x64
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	3332      	adds	r3, #50	; 0x32
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <UART_SetConfig+0x2d4>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	f003 0207 	and.w	r2, r3, #7
 8001cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4422      	add	r2, r4
 8001cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001cc4:	e105      	b.n	8001ed2 <UART_SetConfig+0x4d6>
 8001cc6:	bf00      	nop
 8001cc8:	40011000 	.word	0x40011000
 8001ccc:	40011400 	.word	0x40011400
 8001cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001cde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001ce6:	4642      	mov	r2, r8
 8001ce8:	464b      	mov	r3, r9
 8001cea:	1891      	adds	r1, r2, r2
 8001cec:	6239      	str	r1, [r7, #32]
 8001cee:	415b      	adcs	r3, r3
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	1854      	adds	r4, r2, r1
 8001cfa:	4649      	mov	r1, r9
 8001cfc:	eb43 0501 	adc.w	r5, r3, r1
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	00eb      	lsls	r3, r5, #3
 8001d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0e:	00e2      	lsls	r2, r4, #3
 8001d10:	4614      	mov	r4, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	4643      	mov	r3, r8
 8001d16:	18e3      	adds	r3, r4, r3
 8001d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d1c:	464b      	mov	r3, r9
 8001d1e:	eb45 0303 	adc.w	r3, r5, r3
 8001d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d42:	4629      	mov	r1, r5
 8001d44:	008b      	lsls	r3, r1, #2
 8001d46:	4621      	mov	r1, r4
 8001d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	008a      	lsls	r2, r1, #2
 8001d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001d54:	f7fe facc 	bl	80002f0 <__aeabi_uldivmod>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4b60      	ldr	r3, [pc, #384]	; (8001ee0 <UART_SetConfig+0x4e4>)
 8001d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	011c      	lsls	r4, r3, #4
 8001d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001d78:	4642      	mov	r2, r8
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	1891      	adds	r1, r2, r2
 8001d7e:	61b9      	str	r1, [r7, #24]
 8001d80:	415b      	adcs	r3, r3
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d88:	4641      	mov	r1, r8
 8001d8a:	1851      	adds	r1, r2, r1
 8001d8c:	6139      	str	r1, [r7, #16]
 8001d8e:	4649      	mov	r1, r9
 8001d90:	414b      	adcs	r3, r1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001da0:	4659      	mov	r1, fp
 8001da2:	00cb      	lsls	r3, r1, #3
 8001da4:	4651      	mov	r1, sl
 8001da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001daa:	4651      	mov	r1, sl
 8001dac:	00ca      	lsls	r2, r1, #3
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	4642      	mov	r2, r8
 8001db6:	189b      	adds	r3, r3, r2
 8001db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dbc:	464b      	mov	r3, r9
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	eb42 0303 	adc.w	r3, r2, r3
 8001dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001dd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001de0:	4649      	mov	r1, r9
 8001de2:	008b      	lsls	r3, r1, #2
 8001de4:	4641      	mov	r1, r8
 8001de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001dea:	4641      	mov	r1, r8
 8001dec:	008a      	lsls	r2, r1, #2
 8001dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001df2:	f7fe fa7d 	bl	80002f0 <__aeabi_uldivmod>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <UART_SetConfig+0x4e4>)
 8001dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	2164      	movs	r1, #100	; 0x64
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	3332      	adds	r3, #50	; 0x32
 8001e0e:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <UART_SetConfig+0x4e4>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e1a:	441c      	add	r4, r3
 8001e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e20:	2200      	movs	r2, #0
 8001e22:	673b      	str	r3, [r7, #112]	; 0x70
 8001e24:	677a      	str	r2, [r7, #116]	; 0x74
 8001e26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e2a:	4642      	mov	r2, r8
 8001e2c:	464b      	mov	r3, r9
 8001e2e:	1891      	adds	r1, r2, r2
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	415b      	adcs	r3, r3
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e3a:	4641      	mov	r1, r8
 8001e3c:	1851      	adds	r1, r2, r1
 8001e3e:	6039      	str	r1, [r7, #0]
 8001e40:	4649      	mov	r1, r9
 8001e42:	414b      	adcs	r3, r1
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e52:	4659      	mov	r1, fp
 8001e54:	00cb      	lsls	r3, r1, #3
 8001e56:	4651      	mov	r1, sl
 8001e58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e5c:	4651      	mov	r1, sl
 8001e5e:	00ca      	lsls	r2, r1, #3
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	4603      	mov	r3, r0
 8001e66:	4642      	mov	r2, r8
 8001e68:	189b      	adds	r3, r3, r2
 8001e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	460a      	mov	r2, r1
 8001e70:	eb42 0303 	adc.w	r3, r2, r3
 8001e74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e80:	667a      	str	r2, [r7, #100]	; 0x64
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001e8e:	4649      	mov	r1, r9
 8001e90:	008b      	lsls	r3, r1, #2
 8001e92:	4641      	mov	r1, r8
 8001e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e98:	4641      	mov	r1, r8
 8001e9a:	008a      	lsls	r2, r1, #2
 8001e9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ea0:	f7fe fa26 	bl	80002f0 <__aeabi_uldivmod>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <UART_SetConfig+0x4e4>)
 8001eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	2164      	movs	r1, #100	; 0x64
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	3332      	adds	r3, #50	; 0x32
 8001ebc:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <UART_SetConfig+0x4e4>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	f003 020f 	and.w	r2, r3, #15
 8001ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4422      	add	r2, r4
 8001ed0:	609a      	str	r2, [r3, #8]
}
 8001ed2:	bf00      	nop
 8001ed4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ede:	bf00      	nop
 8001ee0:	51eb851f 	.word	0x51eb851f

08001ee4 <__libc_init_array>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	4d0d      	ldr	r5, [pc, #52]	; (8001f1c <__libc_init_array+0x38>)
 8001ee8:	4c0d      	ldr	r4, [pc, #52]	; (8001f20 <__libc_init_array+0x3c>)
 8001eea:	1b64      	subs	r4, r4, r5
 8001eec:	10a4      	asrs	r4, r4, #2
 8001eee:	2600      	movs	r6, #0
 8001ef0:	42a6      	cmp	r6, r4
 8001ef2:	d109      	bne.n	8001f08 <__libc_init_array+0x24>
 8001ef4:	4d0b      	ldr	r5, [pc, #44]	; (8001f24 <__libc_init_array+0x40>)
 8001ef6:	4c0c      	ldr	r4, [pc, #48]	; (8001f28 <__libc_init_array+0x44>)
 8001ef8:	f000 f820 	bl	8001f3c <_init>
 8001efc:	1b64      	subs	r4, r4, r5
 8001efe:	10a4      	asrs	r4, r4, #2
 8001f00:	2600      	movs	r6, #0
 8001f02:	42a6      	cmp	r6, r4
 8001f04:	d105      	bne.n	8001f12 <__libc_init_array+0x2e>
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f0c:	4798      	blx	r3
 8001f0e:	3601      	adds	r6, #1
 8001f10:	e7ee      	b.n	8001ef0 <__libc_init_array+0xc>
 8001f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f16:	4798      	blx	r3
 8001f18:	3601      	adds	r6, #1
 8001f1a:	e7f2      	b.n	8001f02 <__libc_init_array+0x1e>
 8001f1c:	08001f74 	.word	0x08001f74
 8001f20:	08001f74 	.word	0x08001f74
 8001f24:	08001f74 	.word	0x08001f74
 8001f28:	08001f78 	.word	0x08001f78

08001f2c <memset>:
 8001f2c:	4402      	add	r2, r0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d100      	bne.n	8001f36 <memset+0xa>
 8001f34:	4770      	bx	lr
 8001f36:	f803 1b01 	strb.w	r1, [r3], #1
 8001f3a:	e7f9      	b.n	8001f30 <memset+0x4>

08001f3c <_init>:
 8001f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3e:	bf00      	nop
 8001f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f42:	bc08      	pop	{r3}
 8001f44:	469e      	mov	lr, r3
 8001f46:	4770      	bx	lr

08001f48 <_fini>:
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4a:	bf00      	nop
 8001f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4e:	bc08      	pop	{r3}
 8001f50:	469e      	mov	lr, r3
 8001f52:	4770      	bx	lr
